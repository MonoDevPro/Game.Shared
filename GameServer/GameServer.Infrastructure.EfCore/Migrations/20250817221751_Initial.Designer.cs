// <auto-generated />
using System;
using GameServer.Infrastructure.EfCore.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameServer.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250817221751_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gameserver")
                .HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Game.Core.Common.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Flag para soft delete");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Game.Core.Entities.Account.AccountEntity", b =>
                {
                    b.HasBaseType("Game.Core.Common.BaseEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Accounts_IsActive");

                    b.ToTable("Accounts", "gameserver");
                });

            modelBuilder.Entity("Game.Core.Entities.Character.CharacterEntity", b =>
                {
                    b.HasBaseType("Game.Core.Common.BaseEntity");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasComment("ID da conta proprietária do personagem");

                    b.Property<byte>("Direction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue((byte)5)
                        .HasComment("Direção que o personagem está virado");

                    b.Property<byte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue((byte)0)
                        .HasComment("Sexo do personagem");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Nome do personagem (3-20 caracteres, case-insensitive)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Posição do personagem no mapa (X,Y,Z)");

                    b.Property<float>("Speed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(40f)
                        .HasComment("Velocidade de movimento do personagem");

                    b.Property<byte>("Vocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue((byte)0)
                        .HasComment("Vocação do personagem ");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("IX_Characters_AccountId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Characters_Name_Unique");

                    b.HasIndex("Vocation")
                        .HasDatabaseName("IX_Characters_Class");

                    b.HasIndex("AccountId", "IsActive")
                        .HasDatabaseName("IX_Characters_AccountId_IsActive");

                    b.ToTable("Characters", "gameserver");
                });

            modelBuilder.Entity("Game.Core.Entities.Character.CharacterEntity", b =>
                {
                    b.HasOne("Game.Core.Entities.Account.AccountEntity", "AccountEntity")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountEntity");
                });

            modelBuilder.Entity("Game.Core.Entities.Account.AccountEntity", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
